
dc_motor_switch_pullup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000016ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include <avr/io.h>


int main(void){
	DDRB|=(1<<DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	DDRB|=(1<<DDB4);
  86:	84 b1       	in	r24, 0x04	; 4
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	84 b9       	out	0x04, r24	; 4
	DDRD &=~(1<<DDD2);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	8b 7f       	andi	r24, 0xFB	; 251
  90:	8a b9       	out	0x0a, r24	; 10
	
	PORTD|=(1<<PIND2);
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	84 60       	ori	r24, 0x04	; 4
  96:	8b b9       	out	0x0b, r24	; 11
	/* Replace with your application code */
	while (1)
	{
		if (!(PIND & (1<<PIND2)))
  98:	4a 99       	sbic	0x09, 2	; 9
  9a:	2e c0       	rjmp	.+92     	; 0xf8 <main+0x78>
		{
			PORTB|=(1<<PORTB5);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	85 b9       	out	0x05, r24	; 5
			PORTB&=~(1<<PORTB4);
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 7e       	andi	r24, 0xEF	; 239
  a6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	8b e7       	ldi	r24, 0x7B	; 123
  ac:	92 e9       	ldi	r25, 0x92	; 146
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
			_delay_ms(3000);
			
			PORTB&=~(1<<PORTB5);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 b9       	out	0x05, r24	; 5
			PORTB&=~(1<<PORTB4);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8f 7e       	andi	r24, 0xEF	; 239
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
			_delay_ms(1000);
			
			PORTB&=~(1<<PORTB5);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	85 b9       	out	0x05, r24	; 5
			PORTB|=(1<<PORTB4);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	8b e7       	ldi	r24, 0x7B	; 123
  e8:	92 e9       	ldi	r25, 0x92	; 146
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x6a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x74>
  f4:	00 00       	nop
  f6:	d0 cf       	rjmp	.-96     	; 0x98 <main+0x18>
			_delay_ms(3000);
		}
		else
		{
			PORTB&=~(1<<PORTB5);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	85 b9       	out	0x05, r24	; 5
			PORTB&=~(1<<PORTB4);
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	85 b9       	out	0x05, r24	; 5
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	83 ed       	ldi	r24, 0xD3	; 211
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x8a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x94>
 114:	00 00       	nop
 116:	c0 cf       	rjmp	.-128    	; 0x98 <main+0x18>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
